{"version":3,"file":"plugin.unified-script.js","mappings":"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","sources":["webpack://chrome-opsgenie/./src/infra/components-builders.js","webpack://chrome-opsgenie/./src/notes-compatibility.js","webpack://chrome-opsgenie/./src/notes-rendering.js","webpack://chrome-opsgenie/./src/notes-listeners.js","webpack://chrome-opsgenie/./src/infra/dom-manipulator.js","webpack://chrome-opsgenie/./src/notes.js","webpack://chrome-opsgenie/./src/notes-components.js","webpack://chrome-opsgenie/./src/main.js"],"sourcesContent":["// Function to create text areas\nexport function createTextArea(placeholder) {\n    const textarea = document.createElement('textarea');\n    textarea.placeholder = placeholder;\n    textarea.className = 'custom-textarea';\n    textarea.style.display = 'block';\n    textarea.style.width = '100%';\n    textarea.style.boxSizing = 'border-box';\n    return textarea;\n}\n\n// Function to create radio buttons\nexport function createRadioButton(labelText, name, checked) {\n    const container = document.createElement('div');\n    container.style.marginRight = '10px';\n    container.classList.add('custom-radio-container');\n\n    const input = document.createElement('input');\n    input.type = 'radio';\n    input.name = name;\n    input.checked = checked;\n    input.style.marginRight = '5px';\n\n    const label = document.createElement('label');\n    label.textContent = labelText;\n\n    container.appendChild(input);\n    container.appendChild(label);\n\n    return { container, input };\n}\n\nexport function createTooltip(text, target) {\n    const tooltip = document.createElement('div');\n    tooltip.className = 'tooltip';\n    tooltip.innerHTML = text;\n    tooltip.style.display = 'block';\n\n    target.addEventListener('mouseover', () => {\n        tooltip.classList.add('show');\n    });\n    target.addEventListener('mouseout', () => {\n        tooltip.classList.remove('show');\n    });\n\n    return tooltip;\n}","export function fixViewComponentsCompatibility() {\n    // Fixing titles and divs overlapping the custom fields\n    document.querySelector('.side-contents.add-note-always').style.padding = 0;\n    document.querySelector('.side-header.has-action').style.height = 'fit-content';\n    document.querySelector('.side-header.has-action').style.position = 'relative';\n    document.querySelector('.send-note.ops-form').style.height = 'fit-content';\n\n    // Removing the enter to send note check box\n    document.querySelector('.area-description .genie-checkbox').style.display = 'none';\n    document.querySelector('.area-description .info').style.display = 'none';\n    document.querySelector('.area-description .primary-grey.compact-button').style.position = 'relative';\n}\n\nexport function applyStylesBasedOnDarkModeOrLightMode(components) {\n    const darkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    const triggerInput = components.textArea.trigger;\n    const actionInput = components.textArea.action;\n    const causeInput = components.textArea.cause;\n\n    if (darkMode) {\n        triggerInput.classList.add('dark-mode');\n        actionInput.classList.add('dark-mode');\n        causeInput.classList.add('dark-mode');\n    } else {\n        triggerInput.classList.add('light-mode');\n        actionInput.classList.add('light-mode');\n        causeInput.classList.add('light-mode');\n    }\n}\n","export function improveExistingNotesRendering(components) {\n    const noteText = components.opsgenie.noteInput.value;\n    const match = noteText.match(/Trigger: (.*)\\nAction: (.*)\\nCause: (.*)/);\n    if (match) {\n        components.textArea.trigger.value = match[1];\n        components.textArea.action.value = match[2];\n        components.textArea.cause.value = match[3];\n        console.log('Existing note format matched:', match);\n    }\n}\n\nexport function updateVisibility(event, components) {\n    if (components.noteTypeRadio.resultOption.input.checked) {\n        changeNoteComponentVisibility(components, false);\n        changeResultComponentVisibility(components, true);\n    } else {\n        changeNoteComponentVisibility(components, true);\n        changeResultComponentVisibility(components, false);\n    }\n}\n\nexport function updateButtonState(component, enabled) {\n    if(enabled) {\n        component.disabled = false;\n    } else {\n        component.disabled = true;\n    }\n}\n\nexport function updateAddResultButtonState(components) {\n    updateButtonState(\n        components.button.addResult,\n        components.textArea.trigger.value != \"\" && \n            components.textArea.action.value != \"\" && \n            components.textArea.cause.value != \"\"\n    );\n}\n\nfunction changeNoteComponentVisibility(components, show) {\n    if(show) {\n        components.opsgenie.noteInput.style.display = 'block';\n        components.opsgenie.addNoteButton.style.display = 'block';\n    } else {\n        components.opsgenie.noteInput.style.display = 'none';\n        components.opsgenie.addNoteButton.style.display = 'none';\n    }\n}\n\nfunction changeResultComponentVisibility(components, show) {\n    if(show) {\n        components.textArea.trigger.style.display = 'block';\n        components.textArea.action.style.display = 'block';\n        components.textArea.cause.style.display = 'block';\n        components.button.addResult.style.display = 'block';\n    } else {\n        components.textArea.trigger.style.display = 'none';\n        components.textArea.action.style.display = 'none';\n        components.textArea.cause.style.display = 'none';\n        components.button.addResult.style.display = 'none';\n    }\n}","import { applyStylesBasedOnDarkModeOrLightMode } from './notes-compatibility.js';\nimport { updateButtonState, updateAddResultButtonState, updateVisibility } from './notes-rendering.js';\n\nlet setMonitorInterval = {\n    id: null,\n    startedAt: null\n};\n\nexport function setupListeners(components) {\n    // Listen for radio button changes\n    components.noteTypeRadio.resultOption.input.addEventListener('change', (event) => updateVisibility(event, components));\n    components.noteTypeRadio.noteOption.input.addEventListener('change', (event) => updateVisibility(event, components));\n\n    // Save data from custom fields to the note input\n    components.button.addResult.addEventListener('click', (event) => {\n        console.log('Add note button clicked');\n        if (components.noteTypeRadio.resultOption.input.checked) {\n\n            const resultAsObject = {\n                trigger: components.textArea.trigger.value,\n                action: components.textArea.action.value,\n                cause: components.textArea.cause.value\n            };\n            const formattedResult = `\n            Trigger: ${components.textArea.trigger.value}\\n\n            Action: ${components.textArea.action.value}\\n\n            Cause: ${components.textArea.cause.value}\\n\n            ========JSON========\\n\n            ${JSON.stringify(resultAsObject)}\n            ======JSON=END======\\n\n            `;\n\n            components.opsgenie.noteInput.value = formattedResult;\n            console.log('Note input value set to:', components.opsgenie.noteInput.value);\n\n            // Trigger input event to update the note input\n            const inputEvent = new Event('input', { bubbles: true });\n            components.opsgenie.noteInput.dispatchEvent(inputEvent);\n\n            // Setup the listener to check if the note input is cleared\n            if(!setMonitorInterval.id) {\n                setMonitorInterval.startedAt = new Date();\n                setMonitorInterval.id = setInterval(() => {\n                    const noteInput = components.opsgenie.noteInput;\n                    \n                    // timeout to clear the interval\n                    if(!setMonitorInterval.id) {\n                        return;\n                    }\n\n                    if (noteInput.value === '') {\n                        clearInterval(setMonitorInterval.id);\n                        setMonitorInterval.id = null;\n                        setMonitorInterval.startedAt = null;\n                        console.log('Input note has changed been cleared');\n                        components.textArea.trigger.value = '';\n                        components.textArea.action.value = '';\n                        components.textArea.cause.value = '';\n                        return;\n                    }\n\n                    if(new Date() - setMonitorInterval.startedAt > 10000) {\n                        console.log('Input note has changed been cleared due to timeout');\n                        clearInterval(setMonitorInterval.id);\n                        setMonitorInterval.id = null;\n                        setMonitorInterval.startedAt = null;\n                    }\n                }, 100);\n            }\n\n            // Click the real Add Note button\n            const clickEvent = new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: true\n              });\n            components.opsgenie.addNoteButton.dispatchEvent(clickEvent);\n        }\n    }, true);\n\n    // Add note button event listener\n    components.opsgenie.noteInput.addEventListener('input', (event) => {\n        if(event.currentTarget.value === '') {\n            updateButtonState(components.opsgenie.addNoteButton, event.currentTarget.value);\n        } else {\n            updateButtonState(components.opsgenie.addNoteButton, event.currentTarget.value);\n        }\n    }, true);\n\n    // Custom fields input event listeners\n    components.textArea.trigger.addEventListener('input', (event) => {\n        updateAddResultButtonState(components);\n    }, false);\n    components.textArea.action.addEventListener('input', (event) => {\n        updateAddResultButtonState(components);\n    }, false);\n    components.textArea.cause.addEventListener('input', (event) => {\n        updateAddResultButtonState(components);\n    }, false);\n\n    // Apply styles based on dark mode or light mode\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', applyStylesBasedOnDarkModeOrLightMode);\n}\n\n\n","export function insertAfter(newNode, referenceNode) {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n}\n\nexport function insertBefore(newNode, referenceNode) {\n    referenceNode.parentElement.insertBefore(newNode, referenceNode);\n}","import { buildCustomFields } from './notes-components.js';\nimport { setupListeners } from './notes-listeners.js';\nimport { fixViewComponentsCompatibility, applyStylesBasedOnDarkModeOrLightMode } from './notes-compatibility.js';\nimport { updateVisibility, updateButtonState, updateAddResultButtonState } from './notes-rendering.js';\nimport { insertBefore, insertAfter } from './infra/dom-manipulator.js';\n\nexport function modifyNoteSidebar(noteInput) {\n    console.log('Modifying note sidebar');\n    const components = buildCustomFields(noteInput);\n    addComponentsToDom(components);\n    setupListeners(components);\n    fixViewComponentsCompatibility()\n    applyStylesBasedOnDarkModeOrLightMode(components);\n    updateVisibility(null, components);\n    updateButtonState(components.opsgenie.addNoteButton, false);\n    updateAddResultButtonState(components);\n}\n\nfunction addComponentsToDom(components) {\n    // Radio selection\n    insertBefore(components.noteTypeRadio.container, components.opsgenie.noteInput);\n    insertBefore(components.tooltip.radioContainer, components.noteTypeRadio.container);\n\n    // Custom text areas\n    insertBefore(components.textArea.trigger, components.opsgenie.noteInput);\n    insertBefore(components.textArea.action, components.opsgenie.noteInput);\n    insertBefore(components.textArea.cause, components.opsgenie.noteInput);\n\n    // Add Result button\n    insertAfter(components.button.addResult, components.opsgenie.addNoteButton);\n}","import { createRadioButton, createTextArea, createTooltip } from './infra/components-builders.js';\n\nexport function buildCustomFields(noteInput) {\n    // Remove existing custom fields and radio buttons if they exist\n    document.querySelectorAll('.custom-textarea, .custom-radio-container').forEach(element => element.remove());\n\n    // Create the radio buttons\n    const radioNoteTypeContainer = document.createElement('div');\n    radioNoteTypeContainer.style.display = 'flex';\n    radioNoteTypeContainer.style.alignItems = 'center';\n    radioNoteTypeContainer.classList.add('custom-radio-container');\n    const resultRadioType = createRadioButton('Result', 'mode', true);\n    const noteRadioType = createRadioButton('Note', 'mode', false);\n    radioNoteTypeContainer.appendChild(resultRadioType.container);\n    radioNoteTypeContainer.appendChild(noteRadioType.container);\n\n    // Radio buttons tooltip\n    const radioNoteTypeContainerTooltip = createTooltip(\n        `<b>Select the Note Type:</b></br></br>\n        - <b>Result:</b> To add findings and conclusions after analysis</br>\n        - <b>Note:</b> To log changes and events during a war room session or troubleshooting`,\n        radioNoteTypeContainer\n    );\n\n    // Create the custom input text area\n    const triggerInput = createTextArea('Trigger: What triggered the alert?');\n    const actionInput = createTextArea('Action: What did you had to do?');\n    const causeInput = createTextArea('Cause: What was the root cause?');\n\n    // Create the fake Add Note Button copping the real one\n    const addNoteButton = document.querySelector('.primary-grey.compact-button')\n    const addResultButton = addNoteButton.cloneNode(true);\n    Array.from(addResultButton.attributes).forEach(attr => {\n        if (attr.name == 'class' || attr.name == 'style') {\n            return;\n        }\n        addResultButton.removeAttribute(attr.name);\n    });\n    addResultButton.style.position = 'relative';\n    addResultButton.querySelector('b').textContent = 'Add Result';\n\n    const components = { \n        opsgenie: {\n            noteInput: noteInput,\n            addNoteButton: addNoteButton\n        },\n        noteTypeRadio: {\n            container: radioNoteTypeContainer,\n            noteOption: noteRadioType,\n            resultOption: resultRadioType \n        },\n        textArea: {\n            trigger: triggerInput, \n            action: actionInput, \n            cause: causeInput\n        },\n        button: {\n            addResult: addResultButton\n        },\n        tooltip: {\n            radioContainer: radioNoteTypeContainerTooltip\n        }\n    };\n\n    return components;\n}\n","import { modifyNoteSidebar } from './notes.js';\n\nfunction isAlertDetailUrl() {\n    const urlPattern = /^https:\\/\\/.*\\.opsgenie\\.com\\/alert\\/detail\\/.*/;\n    return urlPattern.test(window.location.href);\n}\n\nlet lastUrl = window.location.href;\n\nfunction observeUrlChanges() {\n    const observer = new MutationObserver(() => {\n        if (lastUrl !== window.location.href) {\n            lastUrl = window.location.href;\n            console.log('URL changed:', lastUrl);\n            if (isAlertDetailUrl()) {\n                const noteInput = document.querySelector('.ops-textarea');\n                if (noteInput) {\n                    if (document.readyState === 'loading') {\n                        document.addEventListener('DOMContentLoaded', onDocumentReady);\n                    } else {\n                        onDocumentReady();\n                    }\n                }\n            }\n        }\n    });\n\n    observer.observe(document.body, { childList: true, subtree: true });\n}\n\nfunction onDocumentReady() {\n    console.log('DOM fully loaded and parsed');\n    const checkSidebar = setInterval(() => {\n        const noteInput = document.querySelector('.ops-textarea');\n        if (noteInput) {\n            console.log('Note input field found:', noteInput);\n            clearInterval(checkSidebar);\n            if (isAlertDetailUrl()) {\n                modifyNoteSidebar(noteInput);\n                observeUrlChanges();\n            }\n        } else {\n            console.log('Note input field not found, retrying...');\n        }\n    }, 1000);\n}\n\nchrome.storage.local.get(['enhancedOpsgenieAlertNotesPluginEnalbed'], function(result) {\n    if(result.enhancedOpsgenieAlertNotesPluginEnalbed === false) {\n        console.log('Plugin is disabled');\n        return;\n    }\n\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', onDocumentReady);\n    } else {\n        onDocumentReady();\n    }\n});\n"],"names":["createTextArea","placeholder","textarea","document","createElement","className","style","display","width","boxSizing","createRadioButton","labelText","name","checked","container","marginRight","classList","add","input","type","label","textContent","appendChild","applyStylesBasedOnDarkModeOrLightMode","components","darkMode","window","matchMedia","matches","triggerInput","textArea","trigger","actionInput","action","causeInput","cause","updateVisibility","event","noteTypeRadio","resultOption","changeNoteComponentVisibility","changeResultComponentVisibility","updateButtonState","component","enabled","disabled","updateAddResultButtonState","button","addResult","value","show","opsgenie","noteInput","addNoteButton","setMonitorInterval","id","startedAt","insertBefore","newNode","referenceNode","parentElement","modifyNoteSidebar","console","log","querySelectorAll","forEach","element","remove","radioNoteTypeContainer","alignItems","resultRadioType","noteRadioType","target","tooltip","radioNoteTypeContainerTooltip","innerHTML","addEventListener","querySelector","addResultButton","cloneNode","Array","from","attributes","attr","removeAttribute","position","noteOption","radioContainer","buildCustomFields","parentNode","nextSibling","addComponentsToDom","resultAsObject","formattedResult","concat","JSON","stringify","inputEvent","Event","bubbles","dispatchEvent","Date","setInterval","clearInterval","clickEvent","MouseEvent","view","cancelable","currentTarget","setupListeners","padding","height","isAlertDetailUrl","test","location","href","lastUrl","onDocumentReady","checkSidebar","MutationObserver","readyState","observe","body","childList","subtree","chrome","storage","local","get","result","enhancedOpsgenieAlertNotesPluginEnalbed"],"sourceRoot":""}